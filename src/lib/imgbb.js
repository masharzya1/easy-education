/**
 * Client-side Image Upload Helper
 * ‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø Base64 ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Vercel ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶≤‡ßá‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (/api/upload-image) ‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá‡•§
 * ‚ö†Ô∏è ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ /api/upload-image ‡¶´‡¶æ‡¶á‡¶≤‡ßá Base64 ‡¶°‡¶ø‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
 */

// Vercel ‡¶è ‡¶°‡ßá‡¶™‡ßç‡¶≤‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶™‡ßá‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
// ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á URL ‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú‡ßá ‡¶¶‡ßá‡¶¨‡ßá ‡¶®‡¶æ, ‡¶§‡¶ñ‡¶® VITE_API_URL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
const API_URL = import.meta.env.VITE_API_URL || '';

/**
 * Convert File to Base64 (‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
 */
function fileToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result)
    reader.onerror = (error) => reject(error)
  })
}


/**
 * 1. Upload file to server (which uploads to ImgBB)
 * ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ManageTeachers.jsx ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá‡•§
 */
export async function uploadImageToImgBB(file) { // üëà ‡¶è‡¶ñ‡¶æ‡¶®‡ßá export ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
  if (!file) {
    throw new Error("No file provided for upload")
  }
  
  // File Validation
  if (!file.type.startsWith("image/")) {
    throw new Error("File must be an image")
  }
  
  const maxSize = 32 * 1024 * 1024
  if (file.size > maxSize) {
    throw new Error("Image size must be less than 32MB")
  }
  
  try {
    console.log("[Upload] Starting upload...")
    
    // Convert file to base64
    const base64 = await fileToBase64(file)
    const base64Data = base64.replace(/^data:image\/\w+;base64,/, "")
    
    // Call serverless function
    const response = await fetch(`${API_URL}/api/upload-image`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ image: base64Data }),
    })
    
    if (!response.ok) {
      // JSON Parse error ‡¶è‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá response.text() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§, ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ JSON ‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º‡•§
      const errorText = await response.text();
      try {
        const errorData = JSON.parse(errorText);
        throw new Error(errorData.error || "Upload failed from server");
      } catch (e) {
        // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßà‡¶ß JSON ‡¶®‡¶æ ‡¶¶‡ßá‡¶Ø‡¶º
        throw new Error(`Server returned non-JSON error (Status ${response.status}): ${errorText.substring(0, 100)}`);
      }
    }
    
    const data = await response.json()
    
    if (!data.success || !data.url) {
      throw new Error("Invalid response from server: Success or URL missing")
    }
    
    console.log("[Upload] Success:", data.url)
    return data.url
    
  } catch (error) {
    console.error("[Upload] Failed:", error)
    throw new Error(`Failed to upload image: ${error.message}`)
  }
}

/**
 * 2. Upload base64 string to server (‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡ßÅ‡¶ß‡ßÅ base64 ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶Ø‡¶º)
 */
export async function uploadBase64ToImgbb(base64String) { // üëà ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶ì export ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
  if (!base64String) {
    throw new Error("No base64 string provided")
  }
  
  // Note: ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º uploadImageToImgBB-‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ü‡¶ø fileToBase64 ‡¶ß‡¶æ‡¶™‡¶ü‡¶ø ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§ 
  
  // (‡¶¨‡¶æ‡¶ï‡¶ø ‡¶≤‡¶ú‡¶ø‡¶ï uploadImageToImgBB-‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
  // ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®) ...
  
  // ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶Ü‡¶Æ‡¶∞‡¶æ uploadImageToImgBB-‡¶è‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≤‡¶ú‡¶ø‡¶ï‡¶ü‡¶ø ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡¶ø‡•§
  // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶á, ‡¶§‡¶æ‡¶á ‡¶è‡¶ü‡¶ø ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá‡•§
  
  // ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø ‡¶Ø‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã export default ‡¶®‡ßá‡¶á‡•§
  
  const base64Data = base64String.replace(/^data:image\/\w+;base64,/, "")
  
  const response = await fetch(`${API_URL}/api/upload-image`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ image: base64Data }),
  })
  
  if (!response.ok) {
    const errorText = await response.text();
    try {
      const errorData = JSON.parse(errorText);
      throw new Error(errorData.error || "Upload failed from server");
    } catch (e) {
      throw new Error(`Server returned non-JSON error (Status ${response.status}): ${errorText.substring(0, 100)}`);
    }
  }
  
  const data = await response.json()
  
  if (!data.success || !data.url) {
    throw new Error("Invalid response from server")
  }
  
  console.log("[Upload] Base64 upload success:", data.url)
  return data.url
}