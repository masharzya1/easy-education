/**
 * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶æ‡¶á‡¶≤‡¶ï‡ßá Base64-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ API-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ImgBB-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§
 * ... (‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá)
 */

function convertFileToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const base64String = reader.result.split(',')[1];
      resolve(base64String);
    };
    reader.onerror = (error) => reject(error);
  });
}

export async function uploadImageToImgBB(file) {
  // ... (file validation logic same) ...
  if (!file) {
    throw new Error("‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§");
  }
  
  if (!file.type.startsWith("image/") || file.size > 32 * 1024 * 1024) {
    throw new Error("‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶¨‡¶Ç ‡ß©‡ß®MB ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§");
  }
  
  try {
    const base64Image = await convertFileToBase64(file);
    
    const response = await fetch("/api/upload-image", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ image: base64Image }),
    });
    
    // üí° ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶®: ‡¶Ü‡¶ó‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
    if (!response.ok) {
      // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 4xx ‡¶¨‡¶æ 5xx ‡¶π‡¶Ø‡¶º, ‡¶§‡¶æ‡¶π‡¶≤‡ßá JSON ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
      let errorBody;
      try {
        errorBody = await response.json();
        // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø JSON Error ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º, ‡¶∏‡ßá‡¶ü‡¶ø‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        throw new Error(errorBody.error || `‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: HTTP ${response.status}`);
      } catch (e) {
        // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ JSON ‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º (‡¶Ø‡ßá‡¶Æ‡¶® Vercel HTML Error), ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
        console.error("Non-JSON Server Response Received:", await response.text());
        throw new Error(`‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶∏‡¶æ‡ßú‡¶æ (HTTP ${response.status})‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ IMGBB ‡¶ï‡ßÄ Vercel-‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø?`);
      }
    }
    
    // ‡¶Ø‡¶¶‡¶ø response.ok ‡¶π‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶¨ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø JSON
    const data = await response.json();
    
    if (!data.url) {
      throw new Error("ImgBB ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§");
    }
    
    return data.url;
  } catch (error) {
    console.error("Error in Client-Side Upload Utility:", error);
    throw new Error(`‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: ${error.message}`);
  }
}